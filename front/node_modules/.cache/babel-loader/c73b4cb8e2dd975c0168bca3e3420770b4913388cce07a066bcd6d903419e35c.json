{"ast":null,"code":"var _jsxFileName = \"/Users/manuelpascual/Documents/sites/investify/src/Home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\n\n// Usa tu token de Wit.ai\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WIT_API_URL = \"https://api.wit.ai/message?v=20230205&q=\";\nconst WIT_AUTH_TOKEN = \"Bearer YOUR_WIT_API_TOKEN\";\n\n// URLs para APIs de CoinGecko y Bluelytics\nconst COINGECKO_API_URL = \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum&vs_currencies=usd\";\nconst BLUEYTICS_API_URL = \"https://api.bluelytics.com.ar/v2/latest\";\nconst CurrencyChatBot = () => {\n  _s();\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [botResponse, setBotResponse] = useState(\"\");\n  const fetchPrices = async () => {\n    const cryptoData = await fetch(COINGECKO_API_URL).then(res => res.json());\n    const dolarData = await fetch(BLUEYTICS_API_URL).then(res => res.json());\n    return {\n      BTC: cryptoData.bitcoin.usd,\n      ETH: cryptoData.ethereum.usd,\n      blueCompra: dolarData.blue.value_buy,\n      blueVenta: dolarData.blue.value_sell,\n      oficialCompra: dolarData.oficial.value_buy,\n      oficialVenta: dolarData.oficial.value_sell\n    };\n  };\n  const handleUserMessage = async message => {\n    var _witResponse$intents$;\n    setUserMessage(message);\n\n    // Llamada a Wit.ai para interpretar la intención del usuario\n    const witResponse = await fetch(WIT_API_URL + encodeURIComponent(message), {\n      headers: {\n        Authorization: WIT_AUTH_TOKEN\n      }\n    }).then(res => res.json());\n\n    // Extrae la intención y las entidades de la respuesta de Wit.ai\n    const intent = (_witResponse$intents$ = witResponse.intents[0]) === null || _witResponse$intents$ === void 0 ? void 0 : _witResponse$intents$.name;\n    const entities = witResponse.entities;\n\n    // Ejecuta acciones basadas en la intención\n    let response = \"Lo siento, no entendí eso.\";\n    if (intent === \"precio_actual\") {\n      const prices = await fetchPrices();\n      if (entities.moneda) {\n        const moneda = entities.moneda[0].value.toLowerCase();\n        if (moneda === \"btc\" || moneda === \"bitcoin\") {\n          response = `El precio actual de BTC es ${prices.BTC} USD.`;\n        } else if (moneda === \"eth\" || moneda === \"ethereum\") {\n          response = `El precio actual de ETH es ${prices.ETH} USD.`;\n        } else if (moneda === \"dólar\") {\n          response = `El dólar blue compra está a ${prices.blueCompra} ARS, y venta a ${prices.blueVenta} ARS.`;\n        }\n      }\n    } else if (intent === \"cotización_histórica\" && entities.fecha) {\n      // Implementación para buscar una cotización histórica\n      const fecha = entities.fecha[0].value;\n      response = `La cotización de esa fecha (${fecha}) está en desarrollo.`;\n    } else if (intent === \"valor_futuro\" && entities.fecha && entities.monto) {\n      // Implementación para calcular el valor de una inversión en BTC\n      const fecha = entities.fecha[0].value;\n      const monto = entities.monto[0].value;\n      response = `Si invertiste ${monto} USD en BTC el ${fecha}, hoy tendrías X USD. (en desarrollo)`;\n    }\n    setBotResponse(response);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userMessage,\n          onChange: e => setUserMessage(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleUserMessage(userMessage);\n            }\n          },\n          placeholder: \"Escribe tu pregunta...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot-response\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: botResponse\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(CurrencyChatBot, \"0L3HsTFAys3jZRLW5QLsJwSWrJM=\");\n_c = CurrencyChatBot;\nexport default CurrencyChatBot;\nvar _c;\n$RefreshReg$(_c, \"CurrencyChatBot\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WIT_API_URL","WIT_AUTH_TOKEN","COINGECKO_API_URL","BLUEYTICS_API_URL","CurrencyChatBot","_s","userMessage","setUserMessage","botResponse","setBotResponse","fetchPrices","cryptoData","fetch","then","res","json","dolarData","BTC","bitcoin","usd","ETH","ethereum","blueCompra","blue","value_buy","blueVenta","value_sell","oficialCompra","oficial","oficialVenta","handleUserMessage","message","_witResponse$intents$","witResponse","encodeURIComponent","headers","Authorization","intent","intents","name","entities","response","prices","moneda","value","toLowerCase","fecha","monto","className","children","type","onChange","e","target","onKeyDown","key","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/manuelpascual/Documents/sites/investify/src/Home.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n// Usa tu token de Wit.ai\nconst WIT_API_URL = \"https://api.wit.ai/message?v=20230205&q=\";\nconst WIT_AUTH_TOKEN = \"Bearer YOUR_WIT_API_TOKEN\";\n\n// URLs para APIs de CoinGecko y Bluelytics\nconst COINGECKO_API_URL =\n  \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum&vs_currencies=usd\";\nconst BLUEYTICS_API_URL = \"https://api.bluelytics.com.ar/v2/latest\";\n\nconst CurrencyChatBot = () => {\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [botResponse, setBotResponse] = useState(\"\");\n\n  const fetchPrices = async () => {\n    const cryptoData = await fetch(COINGECKO_API_URL).then((res) => res.json());\n    const dolarData = await fetch(BLUEYTICS_API_URL).then((res) => res.json());\n\n    return {\n      BTC: cryptoData.bitcoin.usd,\n      ETH: cryptoData.ethereum.usd,\n      blueCompra: dolarData.blue.value_buy,\n      blueVenta: dolarData.blue.value_sell,\n      oficialCompra: dolarData.oficial.value_buy,\n      oficialVenta: dolarData.oficial.value_sell,\n    };\n  };\n\n  const handleUserMessage = async (message) => {\n    setUserMessage(message);\n\n    // Llamada a Wit.ai para interpretar la intención del usuario\n    const witResponse = await fetch(WIT_API_URL + encodeURIComponent(message), {\n      headers: {\n        Authorization: WIT_AUTH_TOKEN,\n      },\n    }).then((res) => res.json());\n\n    // Extrae la intención y las entidades de la respuesta de Wit.ai\n    const intent = witResponse.intents[0]?.name;\n    const entities = witResponse.entities;\n\n    // Ejecuta acciones basadas en la intención\n    let response = \"Lo siento, no entendí eso.\";\n    if (intent === \"precio_actual\") {\n      const prices = await fetchPrices();\n      if (entities.moneda) {\n        const moneda = entities.moneda[0].value.toLowerCase();\n        if (moneda === \"btc\" || moneda === \"bitcoin\") {\n          response = `El precio actual de BTC es ${prices.BTC} USD.`;\n        } else if (moneda === \"eth\" || moneda === \"ethereum\") {\n          response = `El precio actual de ETH es ${prices.ETH} USD.`;\n        } else if (moneda === \"dólar\") {\n          response = `El dólar blue compra está a ${prices.blueCompra} ARS, y venta a ${prices.blueVenta} ARS.`;\n        }\n      }\n    } else if (intent === \"cotización_histórica\" && entities.fecha) {\n      // Implementación para buscar una cotización histórica\n      const fecha = entities.fecha[0].value;\n      response = `La cotización de esa fecha (${fecha}) está en desarrollo.`;\n    } else if (intent === \"valor_futuro\" && entities.fecha && entities.monto) {\n      // Implementación para calcular el valor de una inversión en BTC\n      const fecha = entities.fecha[0].value;\n      const monto = entities.monto[0].value;\n      response = `Si invertiste ${monto} USD en BTC el ${fecha}, hoy tendrías X USD. (en desarrollo)`;\n    }\n\n    setBotResponse(response);\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-box\">\n        <div className=\"messages\">\n          <input\n            type=\"text\"\n            value={userMessage}\n            onChange={(e) => setUserMessage(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleUserMessage(userMessage);\n              }\n            }}\n            placeholder=\"Escribe tu pregunta...\"\n          />\n          <div className=\"bot-response\">\n            <p>{botResponse}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CurrencyChatBot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}