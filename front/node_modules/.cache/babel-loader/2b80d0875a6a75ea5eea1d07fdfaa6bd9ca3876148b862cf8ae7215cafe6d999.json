{"ast":null,"code":"var _jsxFileName = \"/Users/manuelpascual/Documents/sites/investify/src/Components/CurrencyChatBot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CurrencyChatBot = () => {\n  _s();\n  const [userInput, setUserInput] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n  const handleUserInput = e => {\n    setUserInput(e.target.value);\n  };\n\n  // Llamar a Wit.ai para procesar la intención\n  const handleSendMessage = async () => {\n    if (!userInput) return;\n    try {\n      const query = encodeURIComponent(userInput); // Codificamos la consulta\n      const response = await fetch(`https://api.wit.ai/message?v=20241112&q=${query}`, {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer 3KW3TSEYBFXAFTDNVW4KF24QNKNHUSVB`\n        }\n      });\n      const data = await response.json();\n      console.log(data); // Para ver el resultado de Wit.ai\n\n      // Verificamos la intención y llamamos a las funciones correspondientes\n      if (data && data.intents && data.intents.length > 0) {\n        const intent = data.intents[0].name;\n        switch (intent) {\n          case \"current_price\":\n            await getCurrentPrice();\n            break;\n          case \"historical_price\":\n            await getHistoricalPrice();\n            break;\n          case \"value_comp\":\n            await getValueComparison();\n            break;\n          default:\n            setResponse(\"No pude entender tu mensaje.\");\n        }\n      } else {\n        setResponse(\"No pude entender tu mensaje.\");\n      }\n    } catch (error) {\n      console.error(\"Error al consultar Wit.ai:\", error);\n      setResponse(\"Hubo un error al procesar tu solicitud.\");\n    }\n  };\n\n  // Obtener el precio actual (Dólar, BTC, ETH)\n  const getCurrentPrice = async () => {\n    try {\n      if (userInput.toLowerCase().includes(\"dolar blue\")) {\n        // Obtener el precio del Dólar Blue\n        const response = await fetch(\"https://api.bluelytics.com.ar/v2/latest\");\n        const data = await response.json();\n        setResponse(`El precio actual del Dólar Blue es $${data.blue.value_sell} ARS.`);\n      } else if (userInput.toLowerCase().includes(\"btc\")) {\n        // Llamada a la API de CoinGecko para obtener el precio de BTC\n        const response = await fetch(\"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd\");\n        const data = await response.json();\n        const btcPrice = data.bitcoin.usd;\n        setResponse(`El precio actual de Bitcoin es $${btcPrice} USD.`);\n      } else if (userInput.toLowerCase().includes(\"eth\")) {\n        // Llamada a la API de CoinGecko para obtener el precio de ETH\n        const response = await fetch(\"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\");\n        const data = await response.json();\n        const ethPrice = data.ethereum.usd;\n        setResponse(`El precio actual de Ethereum es $${ethPrice} USD.`);\n      } else {\n        // Si no se especifica ninguna criptomoneda, devolver un mensaje genérico\n        setResponse(\"Por favor, especifica una criptomoneda válida (BTC o ETH).\");\n      }\n    } catch (error) {\n      console.error(\"Error al obtener el precio actual:\", error);\n      setResponse(\"Hubo un error al obtener el precio actual.\");\n    }\n  };\n\n  // Obtener el precio histórico (para BTC, ETH o Dólar Blue)\n  const getHistoricalPrice = async () => {\n    const date = extractDate(userInput); // Extraemos la fecha mencionada por el usuario\n    if (!date) {\n      setResponse(\"Por favor, proporciona una fecha válida.\");\n      return;\n    }\n    try {\n      if (userInput.toLowerCase().includes(\"dolar blue\")) {\n        // Formatear la fecha como \"yyyy-mm-dd\" para Bluelytics\n        const formattedDate = formatDate(date);\n        const response = await fetch(`https://api.bluelytics.com.ar/v2/historical?day=${formattedDate}`);\n        const data = await response.json();\n        setResponse(`El precio del Dólar Blue el ${formattedDate} era $${data.blue.value_sell} ARS.`);\n      } else {\n        // Llamada a la API de CoinGecko para obtener el precio histórico de BTC o ETH\n        const coin = userInput.toLowerCase().includes(\"btc\") ? \"bitcoin\" : \"ethereum\";\n        const formattedDate = formatDate(date);\n        const response = await fetch(`https://api.coingecko.com/api/v3/coins/${coin}/history?date=${formattedDate}&localization=false`);\n        const data = await response.json();\n        const price = coin === \"bitcoin\" ? data.market_data.current_price.usd : data.market_data.current_price.usd;\n        setResponse(`El precio de ${coin.toUpperCase()} el ${formattedDate} era $${price} USD.`);\n      }\n    } catch (error) {\n      console.error(\"Error al obtener el precio histórico:\", error);\n      setResponse(\"Hubo un error al obtener el precio histórico.\");\n    }\n  };\n\n  // Calcular el valor actual de una inversión (BTC, ETH, Dólar Blue)\n  const getValueComparison = async () => {\n    const [amount, date] = extractInvestmentData(userInput); // Extraemos los datos de la inversión\n    if (!amount || !date) {\n      setResponse(\"Por favor, proporciona los datos de inversión correctamente.\");\n      return;\n    }\n    try {\n      // Llamada a la API de CoinGecko para obtener el precio actual de BTC o ETH\n      const response = await fetch(\"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum&vs_currencies=usd\");\n      const data = await response.json();\n      const btcPrice = data.bitcoin.usd;\n      const ethPrice = data.ethereum.usd;\n\n      // Lógica para calcular el valor actual de la inversión\n      let value = 0;\n      if (userInput.toLowerCase().includes(\"btc\")) {\n        value = amount / btcPrice * btcPrice;\n      } else if (userInput.toLowerCase().includes(\"eth\")) {\n        value = amount / ethPrice * ethPrice;\n      }\n      setResponse(`Si hubieras invertido $${amount} en ${userInput.toLowerCase().includes(\"btc\") ? \"BTC\" : \"ETH\"} el ${date}, hoy tendrías aproximadamente $${value} USD.`);\n    } catch (error) {\n      console.error(\"Error al calcular el valor de la inversión:\", error);\n      setResponse(\"Hubo un error al calcular el valor de la inversión.\");\n    }\n  };\n\n  // Funciones auxiliares para extraer fecha y datos de inversión\n  const extractDate = input => {\n    // Regex para extraer la fecha en formato dd/mm/yyyy o dd-mm-yyyy\n    const match = input.match(/\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{4}/);\n    return match ? match[0] : null;\n  };\n  const formatDate = date => {\n    // Convertir la fecha al formato yyyy-mm-dd\n    const parts = date.split(/[\\/\\-]/);\n    return `${parts[2]}-${parts[1]}-${parts[0]}`;\n  };\n  const extractInvestmentData = input => {\n    // Regex para extraer monto y fecha\n    const match = input.match(/(\\d+)\\s*(usd|dolares)\\s*(el\\s*\\d{1,2}[\\-\\/]\\d{1,2}[\\-\\/]\\d{4})/i);\n    if (match) {\n      return [match[1], match[3].trim()];\n    }\n    return [null, null];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: userInput,\n      onChange: handleUserInput,\n      placeholder: \"Escribe tu consulta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendMessage,\n      children: \"Enviar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n};\n_s(CurrencyChatBot, \"0Zdhoud2qEkD4yaTAU2RghNNZ+c=\");\n_c = CurrencyChatBot;\nexport default CurrencyChatBot;\nvar _c;\n$RefreshReg$(_c, \"CurrencyChatBot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CurrencyChatBot","_s","userInput","setUserInput","response","setResponse","handleUserInput","e","target","value","handleSendMessage","query","encodeURIComponent","fetch","method","headers","Authorization","data","json","console","log","intents","length","intent","name","getCurrentPrice","getHistoricalPrice","getValueComparison","error","toLowerCase","includes","blue","value_sell","btcPrice","bitcoin","usd","ethPrice","ethereum","date","extractDate","formattedDate","formatDate","coin","price","market_data","current_price","toUpperCase","amount","extractInvestmentData","input","match","parts","split","trim","children","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/manuelpascual/Documents/sites/investify/src/Components/CurrencyChatBot.jsx"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst CurrencyChatBot = () => {\n  const [userInput, setUserInput] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n\n  const handleUserInput = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  // Llamar a Wit.ai para procesar la intención\n  const handleSendMessage = async () => {\n    if (!userInput) return;\n\n    try {\n      const query = encodeURIComponent(userInput); // Codificamos la consulta\n      const response = await fetch(\n        `https://api.wit.ai/message?v=20241112&q=${query}`,\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer 3KW3TSEYBFXAFTDNVW4KF24QNKNHUSVB`,\n          },\n        }\n      );\n\n      const data = await response.json();\n      console.log(data); // Para ver el resultado de Wit.ai\n\n      // Verificamos la intención y llamamos a las funciones correspondientes\n      if (data && data.intents && data.intents.length > 0) {\n        const intent = data.intents[0].name;\n        switch (intent) {\n          case \"current_price\":\n            await getCurrentPrice();\n            break;\n          case \"historical_price\":\n            await getHistoricalPrice();\n            break;\n          case \"value_comp\":\n            await getValueComparison();\n            break;\n          default:\n            setResponse(\"No pude entender tu mensaje.\");\n        }\n      } else {\n        setResponse(\"No pude entender tu mensaje.\");\n      }\n    } catch (error) {\n      console.error(\"Error al consultar Wit.ai:\", error);\n      setResponse(\"Hubo un error al procesar tu solicitud.\");\n    }\n  };\n\n  // Obtener el precio actual (Dólar, BTC, ETH)\n  const getCurrentPrice = async () => {\n    try {\n      if (userInput.toLowerCase().includes(\"dolar blue\")) {\n        // Obtener el precio del Dólar Blue\n        const response = await fetch(\"https://api.bluelytics.com.ar/v2/latest\");\n        const data = await response.json();\n        setResponse(\n          `El precio actual del Dólar Blue es $${data.blue.value_sell} ARS.`\n        );\n      } else if (userInput.toLowerCase().includes(\"btc\")) {\n        // Llamada a la API de CoinGecko para obtener el precio de BTC\n        const response = await fetch(\n          \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd\"\n        );\n        const data = await response.json();\n        const btcPrice = data.bitcoin.usd;\n        setResponse(`El precio actual de Bitcoin es $${btcPrice} USD.`);\n      } else if (userInput.toLowerCase().includes(\"eth\")) {\n        // Llamada a la API de CoinGecko para obtener el precio de ETH\n        const response = await fetch(\n          \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\"\n        );\n        const data = await response.json();\n        const ethPrice = data.ethereum.usd;\n        setResponse(`El precio actual de Ethereum es $${ethPrice} USD.`);\n      } else {\n        // Si no se especifica ninguna criptomoneda, devolver un mensaje genérico\n        setResponse(\n          \"Por favor, especifica una criptomoneda válida (BTC o ETH).\"\n        );\n      }\n    } catch (error) {\n      console.error(\"Error al obtener el precio actual:\", error);\n      setResponse(\"Hubo un error al obtener el precio actual.\");\n    }\n  };\n\n  // Obtener el precio histórico (para BTC, ETH o Dólar Blue)\n  const getHistoricalPrice = async () => {\n    const date = extractDate(userInput); // Extraemos la fecha mencionada por el usuario\n    if (!date) {\n      setResponse(\"Por favor, proporciona una fecha válida.\");\n      return;\n    }\n\n    try {\n      if (userInput.toLowerCase().includes(\"dolar blue\")) {\n        // Formatear la fecha como \"yyyy-mm-dd\" para Bluelytics\n        const formattedDate = formatDate(date);\n        const response = await fetch(\n          `https://api.bluelytics.com.ar/v2/historical?day=${formattedDate}`\n        );\n        const data = await response.json();\n        setResponse(\n          `El precio del Dólar Blue el ${formattedDate} era $${data.blue.value_sell} ARS.`\n        );\n      } else {\n        // Llamada a la API de CoinGecko para obtener el precio histórico de BTC o ETH\n        const coin = userInput.toLowerCase().includes(\"btc\")\n          ? \"bitcoin\"\n          : \"ethereum\";\n        const formattedDate = formatDate(date);\n        const response = await fetch(\n          `https://api.coingecko.com/api/v3/coins/${coin}/history?date=${formattedDate}&localization=false`\n        );\n        const data = await response.json();\n        const price =\n          coin === \"bitcoin\"\n            ? data.market_data.current_price.usd\n            : data.market_data.current_price.usd;\n        setResponse(\n          `El precio de ${coin.toUpperCase()} el ${formattedDate} era $${price} USD.`\n        );\n      }\n    } catch (error) {\n      console.error(\"Error al obtener el precio histórico:\", error);\n      setResponse(\"Hubo un error al obtener el precio histórico.\");\n    }\n  };\n\n  // Calcular el valor actual de una inversión (BTC, ETH, Dólar Blue)\n  const getValueComparison = async () => {\n    const [amount, date] = extractInvestmentData(userInput); // Extraemos los datos de la inversión\n    if (!amount || !date) {\n      setResponse(\n        \"Por favor, proporciona los datos de inversión correctamente.\"\n      );\n      return;\n    }\n\n    try {\n      // Llamada a la API de CoinGecko para obtener el precio actual de BTC o ETH\n      const response = await fetch(\n        \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum&vs_currencies=usd\"\n      );\n      const data = await response.json();\n      const btcPrice = data.bitcoin.usd;\n      const ethPrice = data.ethereum.usd;\n\n      // Lógica para calcular el valor actual de la inversión\n      let value = 0;\n      if (userInput.toLowerCase().includes(\"btc\")) {\n        value = (amount / btcPrice) * btcPrice;\n      } else if (userInput.toLowerCase().includes(\"eth\")) {\n        value = (amount / ethPrice) * ethPrice;\n      }\n      setResponse(\n        `Si hubieras invertido $${amount} en ${\n          userInput.toLowerCase().includes(\"btc\") ? \"BTC\" : \"ETH\"\n        } el ${date}, hoy tendrías aproximadamente $${value} USD.`\n      );\n    } catch (error) {\n      console.error(\"Error al calcular el valor de la inversión:\", error);\n      setResponse(\"Hubo un error al calcular el valor de la inversión.\");\n    }\n  };\n\n  // Funciones auxiliares para extraer fecha y datos de inversión\n  const extractDate = (input) => {\n    // Regex para extraer la fecha en formato dd/mm/yyyy o dd-mm-yyyy\n    const match = input.match(/\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{4}/);\n    return match ? match[0] : null;\n  };\n\n  const formatDate = (date) => {\n    // Convertir la fecha al formato yyyy-mm-dd\n    const parts = date.split(/[\\/\\-]/);\n    return `${parts[2]}-${parts[1]}-${parts[0]}`;\n  };\n\n  const extractInvestmentData = (input) => {\n    // Regex para extraer monto y fecha\n    const match = input.match(\n      /(\\d+)\\s*(usd|dolares)\\s*(el\\s*\\d{1,2}[\\-\\/]\\d{1,2}[\\-\\/]\\d{4})/i\n    );\n    if (match) {\n      return [match[1], match[3].trim()];\n    }\n    return [null, null];\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={userInput}\n        onChange={handleUserInput}\n        placeholder=\"Escribe tu consulta\"\n      />\n      <button onClick={handleSendMessage}>Enviar</button>\n      <p>{response}</p>\n    </div>\n  );\n};\n\nexport default CurrencyChatBot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}