{"ast":null,"code":"var _jsxFileName = \"/Users/manuelpascual/Documents/sites/investify/src/Components/ChatBot/ChatBot.jsx\",\n  _s = $RefreshSig$();\n// Chatbot.js\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const handleInputChange = e => {\n    setUserInput(e.target.value);\n  };\n  const sendMessage = async () => {\n    if (!userInput.trim()) return;\n    const newMessages = [...messages, {\n      sender: \"user\",\n      text: userInput\n    }];\n    setMessages(newMessages);\n    setUserInput(\"\");\n\n    // Generar respuesta\n    const response = await getChatbotResponse(userInput);\n\n    // Guardar la interacción\n    await storeInteraction(userInput, response);\n\n    // Actualizar mensajes\n    setMessages([...newMessages, {\n      sender: \"bot\",\n      text: response\n    }]);\n  };\n  const getChatbotResponse = async input => {\n    const lowerInput = input.toLowerCase();\n\n    // Verificar si está pidiendo cotización de criptomonedas (ejemplo: \"precio bitcoin\")\n    if (lowerInput.includes(\"precio\") && (lowerInput.includes(\"bitcoin\") || lowerInput.includes(\"btc\"))) {\n      return await fetchCryptoPrice(\"bitcoin\");\n    }\n\n    // Verificar si está pidiendo cotización del dólar\n    if (lowerInput.includes(\"dólar\") || lowerInput.includes(\"usd\") || lowerInput.includes(\"dolar\")) {\n      return await fetchDollarPrice();\n    }\n\n    // Respuesta por defecto para temas desconocidos\n    return `Soy un chatbot especializado en cotizaciones de criptomonedas y del dólar. Pregúntame el precio del bitcoin o el dólar.`;\n  };\n  const fetchCryptoPrice = async cryptoId => {\n    try {\n      const res = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${cryptoId}&vs_currencies=usd`);\n      const data = await res.json();\n      return `El precio de ${cryptoId.charAt(0).toUpperCase() + cryptoId.slice(1)} es $${data[cryptoId].usd} USD.`;\n    } catch (error) {\n      return \"Lo siento, no pude obtener el precio de la criptomoneda en este momento.\";\n    }\n  };\n  const fetchDollarPrice = async () => {\n    try {\n      const res = await fetch(\"https://api.bluelytics.com.ar/v2/latest\");\n      const data = await res.json();\n      const oficial = data.oficial;\n      const blue = data.blue;\n      return `Cotización del dólar:\\n- Oficial: Compra $${oficial.value_buy} / Venta $${oficial.value_sell}\\n- Blue: Compra $${blue.value_buy} / Venta $${blue.value_sell}`;\n    } catch (error) {\n      return \"Lo siento, no pude obtener la cotización del dólar en este momento.\";\n    }\n  };\n  const storeInteraction = async (userQuery, botResponse) => {\n    await fetch(\"https://api.magicloops.com/store\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        userQuery,\n        botResponse\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.sender,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: userInput,\n      onChange: handleInputChange,\n      onKeyPress: e => e.key === \"Enter\" ? sendMessage() : null,\n      placeholder: \"Escribe algo...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Enviar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"1zGRC38DTEORNFfajD4oL7sdkj8=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","userInput","setUserInput","handleInputChange","e","target","value","sendMessage","trim","newMessages","sender","text","response","getChatbotResponse","storeInteraction","input","lowerInput","toLowerCase","includes","fetchCryptoPrice","fetchDollarPrice","cryptoId","res","fetch","data","json","charAt","toUpperCase","slice","usd","error","oficial","blue","value_buy","value_sell","userQuery","botResponse","method","body","JSON","stringify","headers","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onKeyPress","key","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/manuelpascual/Documents/sites/investify/src/Components/ChatBot/ChatBot.jsx"],"sourcesContent":["// Chatbot.js\nimport React, { useState } from \"react\";\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  const sendMessage = async () => {\n    if (!userInput.trim()) return;\n\n    const newMessages = [...messages, { sender: \"user\", text: userInput }];\n    setMessages(newMessages);\n    setUserInput(\"\");\n\n    // Generar respuesta\n    const response = await getChatbotResponse(userInput);\n\n    // Guardar la interacción\n    await storeInteraction(userInput, response);\n\n    // Actualizar mensajes\n    setMessages([...newMessages, { sender: \"bot\", text: response }]);\n  };\n\n  const getChatbotResponse = async (input) => {\n    const lowerInput = input.toLowerCase();\n\n    // Verificar si está pidiendo cotización de criptomonedas (ejemplo: \"precio bitcoin\")\n    if (\n      lowerInput.includes(\"precio\") &&\n      (lowerInput.includes(\"bitcoin\") || lowerInput.includes(\"btc\"))\n    ) {\n      return await fetchCryptoPrice(\"bitcoin\");\n    }\n\n    // Verificar si está pidiendo cotización del dólar\n    if (\n      lowerInput.includes(\"dólar\") ||\n      lowerInput.includes(\"usd\") ||\n      lowerInput.includes(\"dolar\")\n    ) {\n      return await fetchDollarPrice();\n    }\n\n    // Respuesta por defecto para temas desconocidos\n    return `Soy un chatbot especializado en cotizaciones de criptomonedas y del dólar. Pregúntame el precio del bitcoin o el dólar.`;\n  };\n\n  const fetchCryptoPrice = async (cryptoId) => {\n    try {\n      const res = await fetch(\n        `https://api.coingecko.com/api/v3/simple/price?ids=${cryptoId}&vs_currencies=usd`\n      );\n      const data = await res.json();\n      return `El precio de ${\n        cryptoId.charAt(0).toUpperCase() + cryptoId.slice(1)\n      } es $${data[cryptoId].usd} USD.`;\n    } catch (error) {\n      return \"Lo siento, no pude obtener el precio de la criptomoneda en este momento.\";\n    }\n  };\n\n  const fetchDollarPrice = async () => {\n    try {\n      const res = await fetch(\"https://api.bluelytics.com.ar/v2/latest\");\n      const data = await res.json();\n      const oficial = data.oficial;\n      const blue = data.blue;\n      return `Cotización del dólar:\\n- Oficial: Compra $${oficial.value_buy} / Venta $${oficial.value_sell}\\n- Blue: Compra $${blue.value_buy} / Venta $${blue.value_sell}`;\n    } catch (error) {\n      return \"Lo siento, no pude obtener la cotización del dólar en este momento.\";\n    }\n  };\n\n  const storeInteraction = async (userQuery, botResponse) => {\n    await fetch(\"https://api.magicloops.com/store\", {\n      method: \"POST\",\n      body: JSON.stringify({ userQuery, botResponse }),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  };\n\n  return (\n    <div className=\"chatbot-container\">\n      <div className=\"chatbot-messages\">\n        {messages.map((msg, index) => (\n          <div key={index} className={msg.sender}>\n            {msg.text}\n          </div>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        value={userInput}\n        onChange={handleInputChange}\n        onKeyPress={(e) => (e.key === \"Enter\" ? sendMessage() : null)}\n        placeholder=\"Escribe algo...\"\n      />\n      <button onClick={sendMessage}>Enviar</button>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}